package cart 

import (
	"fmt"
	"path"
	"alc/config"
	"alc/model/cart"
	"alc/model/store"
)

func ToUSD(value int) string {
	return fmt.Sprintf("US$ %.2f", float64(value)/100.0)
}

func TotalProducts(items []cart.Item) int {
	count := 0
	for _, i := range items {
		count += i.Quantity
	}
	return count
}

func TotalPrice(items []cart.Item) int {
	total := 0
	for _, i := range items {
		total += i.Product.Price * i.Quantity
	}
	return total
}

script HandleCartDialogOpening() {
	const openButton = document.querySelector("#cart-button");
	const cartDialog = document.querySelector("#cart-dialog");
	openButton.addEventListener("click", e => {
		cartDialog.showModal();
	});
	cartDialog.addEventListener("click", e => {
		const dimensions = cartDialog.getBoundingClientRect();
		if (
			e.clientX < dimensions.left ||
			e.clientX > dimensions.right ||
			e.clientY < dimensions.top ||
			e.clientY > dimensions.bottom
		) {
			cartDialog.close();
		}
	});
}

templ Show(items []cart.Item) {
	<!-- Applet button -->
	<button
		id="cart-button"
		class="group relative flex items-center justify-center w-8 h-8 text-livid"
		type="button"
		if TotalProducts(items) > 0 {
			data-active
		}
	>
		<svg class="relative w-6 h-6 z-10 lg:w-8 lg:h-8 group-data-[active]:text-chalky" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 18 20">
			<path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M6 15a2 2 0 1 0 0 4 2 2 0 0 0 0-4Zm0 0h8m-8 0-1-4m9 4a2 2 0 1 0 0 4 2 2 0 0 0 0-4Zm-9-4h10l2-7H3m2 7L3 4m0 0-.792-3H1"></path>
		</svg>
		<div class="hidden absolute -inset-y-[0.1rem] aspect-square rounded-full bg-azure lg:-inset-y-2 group-data-[active]:block"></div>
		<div class="hidden absolute text-sm font-bold text-azure -top-4 -right-2 lg:-top-7 lg:-right-4 lg:text-lg group-data-[active]:block">
			{ fmt.Sprintf("%d", TotalProducts(items)) }
		</div>
	</button>
	<!-- Applet dialog -->
	<dialog
		id="cart-dialog"
		class="fixed inset-0 left-auto w-[min(20rem,100vw-2rem)] h-full max-h-[unset] min-w-48 p-4 overflow-y-scroll"
	>
		<!-- Close button -->
		<form class="flex justify-end" method="dialog">
			<button class="flex items-center justify-center w-8 h-8" type="submit">
				<svg class="w-6 h-6" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
					<path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18 18 6m0 12L6 6"></path>
				</svg>
			</button>
		</form>
		<section>
			<h2 class="font-bold text-2xl text-navy">Tu carrito de compras</h2>
			<!-- Cart items -->
			<div class="space-y-3 mt-6">
				for n, i := range items {
					<!-- Cart item -->
					<div class="grid grid-cols-7 gap-x-3 p-2 border">
						<div class="flex justify-end col-span-7">
							<!-- Remove button -->
							<form
								hx-delete="/cart"
								hx-target="#cart-applet"
								enctype="multipart/form-data"
							>
								<input type="hidden" name="Id" value={ fmt.Sprintf("%d", n) } required/>
								<button class="remove relative flex items-center justify-center" type="submit">
									<svg class="w-4 h-4 z-10" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
										<path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18 18 6m0 12L6 6"></path>
									</svg>
									<div class="absolute -inset-y-[0.1rem] aspect-square rounded-full bg-gray-300"></div>
								</button>
							</form>
						</div>
						<div class="col-span-2">
							if i.Product.Item.Img.Id != 0 {
								<img
									class="w-full aspect-square object-cover"
									src={ path.Join(config.IMAGES_PATH, i.Product.Item.Img.Filename) }
									alt={ i.Product.Item.Name }
								/>
							} else {
								<img class="w-full aspect-square object-cover" src="/static/img/noimage.png" alt="No image"/>
							}
						</div>
						<div class="col-span-5">
							<div class="leading-none">
								<a
									class="font-bold text-sm hover:text-livid"
									if i.Product.Item.Category.Type == store.MangaType {
										href={ templ.URL(path.Join("/garantia", i.Product.Item.Category.Slug, i.Product.Item.Slug)) }
									}
								>
									{ i.Product.Item.Name + " - " + i.Product.Name }
								</a>
							</div>
							<div class="text-sm text-livid">
								<span class="font-bold">Precio:</span>
								<span>{ ToUSD(i.Product.Price) }</span>
							</div>
							<div class="text-sm text-livid">
								<span class="font-bold">Cantidad:</span>
								<span>{ fmt.Sprintf("%d", i.Quantity) }</span>
							</div>
							for key, value := range i.Details {
								<div class="text-sm text-livid">
									<span class="font-bold">{ key + ":" }</span>
									<span>{ value }</span>
								</div>
							}
							<div class="text-sm text-navy">
								<span class="font-bold">Subtotal:</span>
								<span>{ ToUSD(i.Product.Price * i.Quantity) }</span>
							</div>
						</div>
					</div>
				}
			</div>
			<hr class="mt-3"/>
			<!-- Cart information -->
			<div class="mt-3">
				<div class="text-2xl">
					<span class="font-bold">Total:</span>
					<span>{ ToUSD(TotalPrice(items)) }</span>
				</div>
			</div>
			<!-- Cart buttons -->
			<div class="grid grid-cols-2 gap-3 mt-3">
				if len(items) != 0 {
					<a class="block col-span-2 p-2 border border-azure rounded-3xl font-semibold text-center text-azure" href="/checkout">
						Checkout
					</a>
				}
				<a class="col-span-2 text-center text-azure" href="/store">
					<span>Ir a la tienda</span>
					<svg class="inline w-3 h-3" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
						<path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="3" d="m9 5 7 7-7 7"></path>
					</svg>
				</a>
			</div>
		</section>
	</dialog>
	@HandleCartDialogOpening()
}
